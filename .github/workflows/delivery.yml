name: Delivery
on: [push]
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ap-northeast
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: scala

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_DB: dog_eared_test
        ports:
          # will assign a random free host port
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000/tcp
        options: --health-cmd "curl --fail http://localhost:8000/shell" --health-interval 10s

    steps:
      - uses: actions/checkout@v2
      - name: Cache ~/.sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt
      - name: Cache ~/.ivy2
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.os }}-ivy2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DUMMY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DUMMY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Create dynamodb tables
        run: ../misc/dev/create-dynamodb-tables.sh
        env:
          AWS_DYNAMODB_ENDPOINT: http://localhost:${{ job.services.dynamodb.ports[8000] }}
      - name: Run tests
        run: sbt 'project drivenAdapters' 'Test / flywayMigrate' 'project tests' test
        env:
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
          AWS_DYNAMODB_ENDPOINT: http://localhost:${{ job.services.dynamodb.ports[8000] }}
  deploy-backend:
    name: Deploy backend resources
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci-deploy'
    needs:
      - test
    defaults:
      run:
        working-directory: scala
    steps:
      - uses: actions/checkout@v2
      - name: Cache ~/.sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt
      - name: Cache ~/.ivy2
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.os }}-ivy2
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
      - name: Deploy artifacts
        run: sbt cli/ecr:push
      - name: Deploy ECS tasks
        run: aws deploy create-deployment --application-name dog-eared-main --deployment-group dog-eared-main --revision 'revisionType=S3,s3Location={bucket=app-spec.jooohn.me,bundleType=YAML,key=dog-eared/appspec.yml}'
#   deploy-frontend:
#     name: Deploy frontend files
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci-deploy'
#     needs:
#       - deploy-backend
#     defaults:
#       run:
#         working-directory: frontend
#     steps:
#       - uses: actions/checkout@v2
#       - name: Cache ~/.yarn-cache
#         uses: actions/cache@v1
#         with:
#           path: ~/.yarn-cache
#           key: ${{ runner.os }}-yarn
#       - name: Cache node_modules
#         uses: actions/cache@v1
#         with:
#           path: ~/.yarn-cache
#           key: ${{ runner.os }}-yarn
#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-region: ap-northeast-1
