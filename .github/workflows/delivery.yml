name: Delivery
on: [push]
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ap-northeast
  GRAPHQL_URI: https://api.dog-eared.jooohn.me/graphql
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: scala

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_DB: dog_eared_test
        ports:
          # will assign a random free host port
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000/tcp
        options: --health-cmd "curl --fail http://localhost:8000/shell" --health-interval 10s

    steps:
      - uses: actions/checkout@v2
      - name: Cache ~/.sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt
      - name: Cache ~/.ivy2
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.os }}-ivy2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DUMMY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DUMMY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Create dynamodb tables
        run: ../misc/dev/create-dynamodb-tables.sh
        env:
          AWS_DYNAMODB_ENDPOINT: http://localhost:${{ job.services.dynamodb.ports[8000] }}
      - name: Run tests
        run: sbt 'project drivenAdapters' 'Test / flywayMigrate' 'project tests' test
        env:
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
          AWS_DYNAMODB_ENDPOINT: http://localhost:${{ job.services.dynamodb.ports[8000] }}
  deploy-backend:
    name: Deploy backend resources
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci-deploy'
    needs:
      - test
    defaults:
      run:
        working-directory: scala
    steps:
      - uses: actions/checkout@v2
      - name: Cache ~/.sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt
      - name: Cache ~/.ivy2
        uses: actions/cache@v1
        with:
          path: ~/.ivy2
          key: ${{ runner.os }}-ivy2
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
      - name: Deploy artifacts
        run: sbt cli/ecr:push
      - name: Download current task definition
        id: task-def
        run: aws ecs describe-task-definition --task-definition dog-eared-main --query taskDefinition > task-definition.json
        working-directory: .
      - name: Deploy ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: dog-eared-main
          cluster: dog-eared-main
          wait-for-service-stability: true
  deploy-frontend:
    name: Deploy frontend files
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci-deploy'
    needs:
      - deploy-backend
    defaults:
      run:
        working-directory: frontend
    env:
      PUBLIC_URL: https://cdn.dog-eared.jooohn.me
      CDN_ORIGIN_S3_BUCKET: origin.cdn.dog-eared.jooohn.me
      REACT_APP_GRAPHQL_URI: ${GRAPHQL_URI}
    steps:
      - uses: actions/checkout@v2
      - name: Cache ~/.yarn-cache
        uses: actions/cache@v1
        with:
          path: ~/.yarn-cache
          key: ${{ runner.os }}-yarn
      - name: Cache node_modules
        uses: actions/cache@v1
        with:
          path: ~/.yarn-cache
          key: ${{ runner.os }}-yarn
      - name: Set up yarn
        uses: actions/setup-node@v2-beta
        with:
          node-version: '12'
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
      - name: Install
        run: yarn install --frozen-lockfile
      - name: Generate codes
        run: yarn generate
      - name: Build
        run: yarn build
      - name: Deploy
        run: yarn deploy
